generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String
  firstName          String
  lastName           String
  phoneNumber        String         @default("0781234568")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  otp                String?
  otpExpiresAt       DateTime? 
  photo              String         @default("https://img.freepik.com/premium-vector/user-profile-icon-flat-style-member-avatar-vector-illustration-isolated-background-human-permission-sign-business-concept_157943-15752.jpg")
  userRoles          UserRole[]  
  likes              Likes[]  
  testimonials       Testimony[]
  agents              Agents[]
  company            CompanyUser?
  notification       Notification[]
  approvals           Approvals[]
  purchaseOrders     PurchaseOrder[]
  createdDeliveries   Delivery[]
  deliveryTracking    DeliveryTracking[]
  // Appointment relations
  providerAppointments Appointment[] @relation("AppointmentProvider")
  createdAppointments  Appointment[] @relation("AppointmentCreatedBy")
  appointmentTimeSlots AppointmentTimeSlot[] @relation("TimeSlotProvider")
  providerAvailability ProviderAvailability[] @relation("ProviderAvailability")
  appointmentNotifications AppointmentNotification[]

}



enum RoleType {
  ADMIN
  AGENT
  COMPANY_ADMIN
  COMPANY_USER
  DEVELOPER
  ADMINISTRATOR
  MANAGER
  STAFF
  CLIENT
}

model UserRole {
  id          String  @id @default(uuid())
  userId      String
  name        RoleType
  user        User    @relation(fields: [userId], references: [id])
}

model ItemCategories {
  id                 String         @id @default(uuid())
  categoryName       String      
  description        String?
  items              Items[]
  companyId         String
  company            Company      @relation(fields: [companyId], references: [id])
}

model Suppliers {
  id                 String         @id @default(uuid())
  supplierName      String         
  contactPerson     String
  phoneNumber       String 
  email              String         @unique 
  address            String? 
  TIN                String?        
  createdAt         DateTime       @default(now()) 
  companyId         String
  company           Company      @relation(fields: [companyId], references: [id])

  supplierCompanyId String?
  supplierCompany   Company?     @relation("supplier_company", fields: [supplierCompanyId], references: [id])
  
  stockReceipts             StockReceipts[]
  purchaseOrders     PurchaseOrder[]
}

model Items {
  id                 String         @id @default(uuid())
  itemCodeSku      String         @unique        
  itemFullName     String
  categoryId        String 
  productCode       String?
  category           ItemCategories @relation(fields: [categoryId], references: [id])
  companyId        String
  company           Company      @relation(fields: [companyId], references: [id])
  description        String?
  minLevel           Decimal         @db.Decimal(10, 2)
  maxLevel           Decimal         @db.Decimal(10, 2)
  // Tax fields
  isTaxable          Boolean         @default(false)
  taxCode            String          @db.VarChar(1) @default("A")
  taxRate            Decimal         @db.Decimal(5, 2) @default(0)
  createdAt         DateTime       @default(now()) 
  updatedAt         DateTime       @updatedAt
  stockReceipts      StockReceipts[]
  purchaseOrderItems PurchaseOrderItem[]
  sells             Sell[]  
  sellItems         SellItem[]
  deliveries        DeliveryItem[]
  directInvoiceItems DirectInvoiceItem[]
}

model StockReceipts {
  id                 String          @id @default(uuid())
  itemId            String           
  item               Items           @relation(fields: [itemId], references: [id])               
  purchaseOrderId              String?
  purchaseOrderNo     PurchaseOrder?   @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderItemId String?  
  purchaseOrderItem   PurchaseOrderItem? @relation(fields: [purchaseOrderItemId], references: [id])
  manualPoNumber     String?
  invoiceNo         String?            
  supplierId        String?           
  supplier           Suppliers?       @relation(fields: [supplierId], references: [id]) 
  companyId        String
  company           Company      @relation(fields: [companyId], references: [id]) 
  dateReceived      DateTime
  expiryDate        DateTime? 
  quantityReceived  Decimal         @db.Decimal(10, 2)  
  unitCost          Decimal         @db.Decimal(18, 4)  
  totalCost         Decimal         @db.Decimal(18, 2)
  packSize          Decimal? 	      @db.Decimal(10, 2) 
  uom                String 
  tempReq           String 
  currency           String
  condition          String
  warehouseId        String? 
  warehouse           Warehouse?   @relation(fields: [warehouseId], references: [id])
  specialHandlingNotes      String? 	
  receiptType        String          @default("PURCHASE_ORDER")      
  remarksNotes       String?
  createdAt          DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  approvals           Approvals[]	
  stocks              Stock[]

  @@index([manualPoNumber])
}

model Stock{
id                 String         @id @default(uuid())
stockReceiptId     String
stockReceipt       StockReceipts  @relation(fields: [stockReceiptId], references: [id])
status             String          @default("PENDING")
companyId       String?
sellId            String?
sell              Sell?      @relation(fields: [sellId], references: [id])
deliveryItemId     String?       
deliveryItem       DeliveryItem?  @relation(fields: [deliveryItemId], references: [id])
}

enum ProcessingStatus {
  PENDING
  SENT
  RECEIVED
  REJECTED
}

enum POApprovalStatus {
  NOT_YET
  SOME_APPROVED
  ALL_APPROVED
  REJECTED
}

enum ItemApprovalStatus {
  NOT_ACTED
  APPROVED
  REJECTED
}

model Approvals {
  id                 String         @id @default(uuid())
  stockReceiptId     String
  stockReceipts             StockReceipts          @relation(fields: [stockReceiptId], references: [id])
  approvedByUserId String 
  approvedByUser    User          @relation(fields: [approvedByUserId], references: [id])
  ExpectedSellPrice          Decimal?         @db.Decimal(18, 2)
  dateApproved      DateTime         
  approvalStatus    String         @default("PENDING")
  comments           String?       
  createdAt          DateTime       @default(now())     
}

model PurchaseOrder{
  id                 String         @id @default(uuid())
  poNumber           String         @unique  
  companyId          String?
  reqById            String?
  reqClientId        String?
  isDelivered        Boolean        @default(false)
  deliveredAt        DateTime? 
  company      Company?  @relation(fields: [companyId], references: [id])
  items              PurchaseOrderItem[]
  supplierId         String
  suppliers          Suppliers @relation(fields: [supplierId], references: [id])
  user                    User? @relation(fields: [reqById], references: [id])
  client                    Client? @relation(fields: [reqClientId], references: [id])
  notes               String?
  expectedDeliveryDate DateTime
  overallStatus      POApprovalStatus @default(NOT_YET)
  grandTotal           Decimal? @db.Decimal(18, 4)
  subtotal             Decimal? @db.Decimal(18, 4)
  vat                  Decimal? @db.Decimal(18, 4)
  vatRate              Float?
  clientAddress        String?
  createdAt            DateTime    @default(now())
  stockReceipts        StockReceipts[]
  processingEntries    PurchaseOrderProcessing[]
  deliveries          Delivery[]
}

model PurchaseOrderItem {
  id              String   @id @default(uuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  itemId          String
  item            Items    @relation(fields: [itemId], references: [id])
  quantity        Decimal  @db.Decimal(10, 2)
  packSize          Decimal? 	      @db.Decimal(10, 2)
  itemStatus      ItemApprovalStatus @default(NOT_ACTED)
  quantityIssued       Decimal? @db.Decimal(10, 2)
  batchNo              String?
  expiryDate           DateTime?
  unitPrice            Decimal? @db.Decimal(18, 4)
  totalPrice           Decimal? @db.Decimal(18, 2)
  stockReceipts   StockReceipts[]
  deliveryItems       DeliveryItem[]
}


model PurchaseOrderProcessing {
  id                   String   @id @default(uuid())
  purchaseOrderId      String
  purchaseOrder        PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  companyFromId        String
  companyFrom          Company @relation("processing_from", fields: [companyFromId], references: [id])
  companyToId          String
  companyTo            Company @relation("processing_to", fields: [companyToId], references: [id])
  status               ProcessingStatus @default(PENDING)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Client {
    id                 String         @id @default(uuid())
    companyId          String
    name               String
    email              String
    phone              String
    address            String
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    sells             Sell[]
    purchaseOrders     PurchaseOrder[]
    transactions       Transaction[]
    directInvoices     DirectInvoice[]
}

model Sell {
    id                 String         @id @default(uuid())
    clientId           String
    companyId          String
    client             Client         @relation(fields: [clientId], references: [id])
    totalAmount        Decimal         @db.Decimal(18, 2)
    notes              String?
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    sellItems          SellItem[]
    stocks             Stock[]
    // Insurance fields (PHARMACY)
    patientId           String?
    patient             Patient?        @relation(fields: [patientId], references: [id], onDelete: SetNull)
    insuranceCardId     String?
    insuranceCard       InsuranceCard?  @relation(fields: [insuranceCardId], references: [id], onDelete: SetNull)
    subtotal            Decimal        @db.Decimal(18, 2) @default(0)
    insuranceCoveredAmount Decimal     @db.Decimal(18, 2) @default(0)
    patientPayableAmount  Decimal      @db.Decimal(18, 2) @default(0)
    insurancePercentage   Decimal?     @db.Decimal(5, 2)
    
    // Legacy fields for backward compatibility
    itemId             String?
    item               Items?         @relation(fields: [itemId], references: [id])
    quantity           Decimal?        @db.Decimal(10, 2)
    sellPrice          Decimal?        @db.Decimal(18, 2)

    @@index([patientId])
    @@index([insuranceCardId])
}

model SellItem {
    id                 String         @id @default(uuid())
    sellId             String
    sell               Sell           @relation(fields: [sellId], references: [id], onDelete: Cascade)
    itemId             String
    item               Items          @relation(fields: [itemId], references: [id])
    quantity           Decimal         @db.Decimal(10, 2)
    sellPrice          Decimal         @db.Decimal(18, 2)
    totalAmount        Decimal         @db.Decimal(18, 2)
    // Optional per-item split for insurance (PHARMACY)
    insuranceCoveredPerUnit Decimal     @db.Decimal(18, 2) @default(0)
    patientPricePerUnit     Decimal     @db.Decimal(18, 2) @default(0)
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
}

model Transaction {
  id         String   @id @default(uuid())
  clientId   String
  companyId  String
  amount     Decimal  @db.Decimal(18, 2)
  date       DateTime

  client     Client   @relation(fields: [clientId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  message     String
  type        NotificationType @default(info)
  isRead      Boolean  @default(false)
  actionUrl   String?  @db.VarChar(500)

  entityType  String?  @db.VarChar(50)
  entityId    String?
  metadata    Json?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum NotificationType {
  info
  success
  warning
  error
}


model Services {
  id                      String           @id @default(uuid())
  title                   String
  description             String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model Testimony {
  id                      String           @id @default(uuid())
  name                    String
  message                 String
  photo                   String?
  rating                  Int?
  reviewsId               String?
  agentReviewId           String?
  userId                  String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  reviews                 Reviews?       @relation(fields: [reviewsId], references: [id])
  agentReviews            AgentReview?   @relation(fields: [agentReviewId], references: [id])
  user                    User? @relation(fields: [userId], references: [id])
}

model Reviews {
  id                      String           @id @default(uuid())
  productId              String           @unique
  count                   Int           @default(0)       
  rating                  Float            
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  product                Product         @relation(fields: [productId], references: [id])
  testimonials            Testimony[]
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  message   String
  status           ContactStatus @default(PENDING)  
  conversationId   String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   ContactReply[]

}

model ContactReply {
  id         String   @id @default(cuid())
  contact    Contact  @relation(fields: [contactId], references: [id])
  contactId  String
  message    String
  adminName  String? 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum ContactStatus {
  PENDING
  RESOLVED
}

enum ProductCategory {
  WOMENS_FASHION
  MENS_FASHION
  FASHION
  ELECTRONICS
  FURNITURES
  MADE_IN_RWANDA
  HOME_AND_LIVING
  SUPERMARKETING
  MOBILES_AND_TABLETS
  COMPUTERS_AND_GAMING
  HEALTH_AND_BEAUTY
  SPORTS_EQUIPMENT
  ART_AND_ENTERTAINMENT
  RESTAURANTS
  JEWELRY_AND_WATCHES
  KIDS_AND_BABIES
  AUTO_SPARE_PARTS
  VEHICLES_SHOPPING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
  SUCCEEDED
  CANCELED
}

enum PaymentMethod {
  CARD
  CASH_ON_DELIVERY
  MOBILE_MONEY
  AIRTEL_MONEY
  BANK_TRANSFER
  MTN_MOBILE_MONEY
}


model Faq {
  id                      String           @id @default(uuid())
  question                String
  solution                String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model Blog {
  id                      String           @id @default(uuid())
  title                   String
  thumbnail               String
  teaser                  String
  description             String
  category                String
  likes                   Int           @default(0)
  views                   Int           @default(0)
  featured                Boolean
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt      
  likesModel              Likes[]            
}

model Likes {
  id                      String           @id  @default(uuid())
  userId                  String
  blogId                  String
  blog                    Blog @relation(fields: [blogId], references: [id])  
  user                    User @relation(fields: [userId], references: [id])  
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt    

  @@unique([blogId, userId])
}

model Ads {
  id                      String           @id @default(uuid())
  thumbnail               String
  title                   String
  location                String
  description             String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model Agents {
  id                      String           @id @default(uuid())
  userId                  String
  description             String  
  experience              String
  speciality              String[]
  whatsapp                String
  joined                  String
  languages               String
  about                   String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt  
  user                    User @relation(fields: [userId], references: [id])
  agentReviews            AgentReview? 
  enquiryProperty         EnquiryProperty[]               
}

model AgentReview {
  id                      String           @id @default(uuid())
  agentId                 String           @unique
  count                   Int           @default(0)       
  rating                  Float         @default(0.0) 
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  agent                   Agents         @relation(fields: [agentId], references: [id])
  testimonials            Testimony[]
}


model Product {
  id                      String           @id @default(uuid())
  name                    String
  isFeatured                Boolean  @default(true)
  description             String
  teaser                  String
  model                   String?
  warranty                   String?
  brand                   String?
  category                ProductCategory
  price                   Float  
  featuresOne            String?
  featuresTwo            String?
  featuresThree          String?
  featuresFour           String?
  featuresFive           String?
  featuresFix            String?
  featuresSeven          String?
  featuresEight          String?
  featuresNine           String?
  featuresTen            String?
  discountPercentage      Float? 
  stockQuantity           Int      @default(0)
  isActive                Boolean  @default(true)
  thumbnail               String
  galleryImages           String[] @default([])
  rating                  Float?   @default(4.5)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  reviews                 Reviews?
  orderItem               OrderItem[]
}


model EnquiryProperty {
  id                      String           @id @default(uuid())
  agentId                 String           @unique
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  agent                   Agents         @relation(fields: [agentId], references: [id])
}

model Order {
  id             String       @id @default(uuid())
  orderNumber    String
  status         OrderStatus  @default(PENDING)
  totalAmount    Float
  subTotal       Float
  deliveryFee    Float? 
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  orderItems     OrderItem[]
}


model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  discount       Float? 
  quantity   Int      @default(1)
  unitPrice  Float    
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id           String        @id @default(uuid())
  subscriptionId      String        @unique
  amount       Float
  kind         String
  method       PaymentMethod
  status       PaymentStatus @default(PENDING)
  paidAt       DateTime?
  accountNumber String
  accountProvider String?
  refId        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  subscription        Subscription         @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}




model Company {
  id             String          @id @default(uuid())
  name           String
  email          String        @unique
  phoneNumber    String        @unique
  industry       String?
  website        String       
  TIN            String        @unique
  type           String
  certificate    String
  logo           String?
  country        String
  province       String
  district       String
  sector         String
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  CompanyUser    CompanyUser[]
  insurance      Insurance[]
  items          Items[]
  itemCategories ItemCategories[]
  suppliers      Suppliers[]
  stockReceipts          StockReceipts[]
  processingFrom  PurchaseOrderProcessing[] @relation("processing_from")
  processingTo    PurchaseOrderProcessing[] @relation("processing_to")
  supplierFor    Suppliers[] @relation("supplier_company")
  purchaseOrders PurchaseOrder[]
  companyTools     CompanyTools[]
  supplierDeliveries  Delivery[] @relation("DeliverySupplier")
  buyerDeliveries     Delivery[] @relation("DeliveryBuyer")
  warehouse          Warehouse[]
  transactions       Transaction[]
  subscription        Subscription[]
  directInvoices      DirectInvoice[]
  invoiceSequences    InvoiceSequence[]
  // Appointment relations
  appointments        Appointment[]
  appointmentTimeSlots AppointmentTimeSlot[]
  providerAvailability ProviderAvailability[]
}

model CompanyUser {
  id           String      @id @default(uuid())
  companyId    String
  userId       String      @unique
  title        String?
  idNumber     String?
  idAttachment String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model Patient {
  id                 String          @id @default(uuid())
  name               String
  identificationType String
  phone              String
  gender             String
  birthDate          DateTime
  patientNO          String          @unique
  NID                String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  companyId          String
  address            PatientAddress[]
  insuranceCards     InsuranceCard[]
  sells              Sell[]
  appointments       Appointment[]
}

model PatientAddress {
  id          String   @id @default(uuid())
  patientId   String
  city        String
  street      String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  patient     Patient  @relation(fields: [patientId], references: [id])
}

model InsuranceCard {
  id            String   @id @default(uuid())
  companyId     String
  patientId     String
  insuranceId     String
  cardNumber    String   @unique
  expireDate    DateTime
  beneficiary   String
  isOwner       Boolean
  expired       Boolean  @default(false)
  deletedAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  patient       Patient  @relation(fields: [patientId], references: [id])
  insurance     Insurance  @relation(fields: [insuranceId], references: [id])
  insuranceDetails InsuranceDetail[]
  sells            Sell[]
}

model InsuranceDetail {
  id              String   @id @default(uuid())
  insuranceCardId String
  key             String
  value           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  insuranceCard   InsuranceCard @relation(fields: [insuranceCardId], references: [id])
}

model Insurance {
  id           String      @id @default(uuid())
  companyId    String
  name         String
  percentage   Float        @default(0.0)
  company      Company      @relation(fields: [companyId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  insuranceCard InsuranceCard[]
}

model  CompanyTools {
  id                  String         @id @default(uuid())
  companyId           String
  sellingPercentage   Int?
  companySignature    String?
  companyStamp        String?
  bankAccounts        Json?

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  company      Company      @relation(fields: [companyId], references: [id])
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
  PARTIALLY_DELIVERED
}

enum DeliveryType {
  FULL_DELIVERY
  PARTIAL_DELIVERY
}

model Delivery {
  id                    String            @id @default(uuid())
  deliveryNumber        String            @unique
  purchaseOrderId       String?
  purchaseOrder         PurchaseOrder?    @relation(fields: [purchaseOrderId], references: [id])

  supplierCompanyId     String
  supplierCompany       Company           @relation("DeliverySupplier", fields: [supplierCompanyId], references: [id])
  buyerCompanyId        String
  buyerCompany          Company           @relation("DeliveryBuyer", fields: [buyerCompanyId], references: [id])

  status                DeliveryStatus    @default(PENDING)
  deliveryType          DeliveryType      @default(FULL_DELIVERY)

  plannedDeliveryDate   DateTime
  actualDeliveryDate    DateTime?
  dispatchDate          DateTime?

  deliveryAddress       String?
  contactPerson         String?
  contactPhone          String?
  contactEmail          String?

  courierService        String?
  trackingNumber        String?
  vehicleDetails        String?
  driverName            String?
  driverPhone           String?

  deliveryNotes         String?
  specialInstructions   String?

  deliveryCharges       Decimal?          @db.Decimal(18, 2)
  
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  createdById           String?
  createdBy             User?             @relation(fields: [createdById], references: [id])

  deliveryItems         DeliveryItem[]
  deliveryTracking      DeliveryTracking[]
}

model DeliveryItem {
  id                    String            @id @default(uuid())
  deliveryId            String
  delivery              Delivery          @relation(fields: [deliveryId], references: [id])
  purchaseOrderItemId   String?
  purchaseOrderItem     PurchaseOrderItem? @relation(fields: [purchaseOrderItemId], references: [id])
  itemId                String?           // For direct stock deliveries
  item                  Items?            @relation(fields: [itemId], references: [id])

  quantityToDeliver     Decimal           @db.Decimal(10, 2)
  quantityDelivered     Decimal?          @db.Decimal(10, 2)
  quantityDamaged       Decimal?          @db.Decimal(10, 2)
  quantityRejected      Decimal?          @db.Decimal(10, 2)

  actualBatchNo         String?
  actualExpiryDate      DateTime?
  actualUnitPrice       Decimal?          @db.Decimal(18, 4)

  itemStatus            DeliveryItemStatus @default(PENDING)
  notes                 String?
  
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  stocks                Stock[] 
}

enum DeliveryItemStatus {
  PENDING
  DISPATCHED
  DELIVERED
  DAMAGED
  REJECTED
  CANCELLED
}

model DeliveryTracking {
  id              String    @id @default(uuid())
  deliveryId      String
  delivery        Delivery  @relation(fields: [deliveryId], references: [id])
  
  status          DeliveryStatus
  location        String?
  description     String?
  timestamp       DateTime  @default(now())
  updatedById     String?
  updatedBy       User?     @relation(fields: [updatedById], references: [id])
  
  createdAt       DateTime  @default(now())
}

model Warehouse {
  id                 String         @id @default(uuid())
  warehousename       String      
  description        String?
  stockReceipts             StockReceipts[]
  companyId         String
  company            Company      @relation(fields: [companyId], references: [id])
}

model Plan {
  id                  String    @id @default(uuid())

  name                String 
  description         String? 
  price        Float
  setupFee            Float?
  additionalUser Float?
  additionalLocation Float?

  features            String[]

  period                 String?
  userRange              String?
  locationRange          String?

  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  subscription        Subscription[]
}

model Subscription {
  id               String   @id @default(uuid())
  companyId    String
  // Subscriber details
  firstName        String
  lastName         String
  email            String
  phone            String
  companyName      String?
  address          String?
  city             String?
  country          String?

  // Payment details
  paymentMethod    String   // e.g. "mobile-money", "credit-card"
  paymentPhone     String?  // for mobile money payments
  billingAddress   String?
  cardNumber       String?  // ⚠️ better store tokenized value, not raw card numbers
  expiryDate       String?  // MM/YY format if card
  cvv              String?  // ⚠️ same — better not store, use payment gateway
  nameOnCard       String?

  // Plan details
  selectedPlan     String   // Plan display name e.g. "Essential Partner"
  planId           String   // Reference key (e.g. "essential")
  planPrice        Float
  setupFee         Float?
  totalDueToday    Float
  billingCycle     String   // e.g. "month", "year"
  periodLabel      String   // e.g. "/month"

  // Relations
  company          Company      @relation(fields: [companyId], references: [id])
  plan             Plan?    @relation(fields: [planId], references: [id])

  payment        Payment?

  // Metadata
  isActive         Boolean  @default(true)
  startDate        DateTime @default(now())
  endDate          DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}


model TrialApplication {
  id                    String   @id @default(uuid())
  applicationNumber     String   @unique 

  organizationName      String
  organizationType      String  
  countryCity           String
  businessRegNumber     String?
  website               String?

  contactFirstName      String
  contactLastName       String
  contactPosition       String
  contactPhone          String
  contactEmail          String
  contactWhatsApp       String?

  modules               String[] 
  approximateUsers      Int
  preferredLanguage     String   
  hasStableInternet     Boolean
  devices               String[] 

  preferredStartDate    DateTime?
  trialDuration         Int      

  ndaSigned             Boolean   @default(false)
  ndaSignedAt           DateTime?
  ndaAgreed             Boolean   @default(false)
  feedbackAgreed        Boolean   @default(false)
  dataUsageAgreed       Boolean   @default(false)
  trialUnderstanding    Boolean   @default(false)
  authorizedRepresentative String?
  signature             String?
  signatureDate         DateTime?

  status                TrialStatus @default(PENDING)
  reviewedBy            String?
  reviewedAt            DateTime?
  approvedBy            String?
  approvedAt            DateTime?
  rejectionReason       String?

  trialAccountId        String?   @unique
  trialStartDate        DateTime?
  trialEndDate          DateTime?
  demoScheduled         Boolean   @default(false)
  demoScheduledDate     DateTime?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  feedbacks             TrialFeedback[]
  demoRequests          DemoRequest[]
}

model DemoRequest {
  id                    String   @id @default(uuid())
  trialApplicationId    String?
  trialApplication      TrialApplication? @relation(fields: [trialApplicationId], references: [id], onDelete: SetNull)

  companyName           String
  contactName           String
  contactEmail          String
  contactPhone          String
  interestedModules     String[] 
  
  preferredDate         DateTime?
  preferredTime         String?
  timezone              String?
  
  additionalNotes       String?  @db.Text
  
  status                DemoStatus @default(REQUESTED)
  scheduledDate         DateTime?
  meetingLink           String?
  assignedTo            String? 
  
  completedAt           DateTime?
  followUpNotes         String?  @db.Text
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model TrialFeedback {
  id                    String   @id @default(uuid())
  trialApplicationId    String
  trialApplication      TrialApplication @relation(fields: [trialApplicationId], references: [id], onDelete: Cascade)
  
  feedbackMonth         Int
  rating                Int
  comments              String   @db.Text
  improvements          String?  @db.Text
  wouldRecommend        Boolean
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([trialApplicationId])
}

enum TrialStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  ACTIVE
  EXPIRED
  CONVERTED
}

enum DemoStatus {
  REQUESTED
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum DirectInvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

model DirectInvoice {
  id             String               @id @default(uuid())
  invoiceNumber    String               @unique
  clientId       String
  companyId      String
  subtotal       Decimal             @db.Decimal(15, 2) @default(0)
  vat            Decimal             @db.Decimal(15, 2) @default(0)
  vatRate        Decimal             @db.Decimal(5, 2) @default(0)
  grandTotal     Decimal             @db.Decimal(15, 2) @default(0)
  currency       String              @default("RWF")
  invoiceDate    DateTime            @default(now())
  dueDate        DateTime
  status         DirectInvoiceStatus @default(DRAFT)
  notes          String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  client         Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company        Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  items          DirectInvoiceItem[]

  @@index([invoiceNumber])
  @@index([clientId])
  @@index([companyId])
  @@index([status])
  @@index([invoiceDate])
  @@index([dueDate])
}

model DirectInvoiceItem {
  id           String         @id @default(uuid())
  invoiceId    String
  itemId       String
  quantity     Decimal        @db.Decimal(10, 3)
  unitPrice    Decimal        @db.Decimal(15, 2)
  totalPrice   Decimal        @db.Decimal(15, 2)
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  invoice      DirectInvoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  item         Items          @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([itemId])
}

model InvoiceSequence {
  id             String   @id @default(uuid())
  companyId      String
  prefix         String   @default("INV")
  currentNumber  Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, prefix])
}

// Appointment System Models
enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
  ROUTINE_CHECKUP
  SPECIALIST
  EMERGENCY
  PROCEDURE
  VACCINATION
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum AppointmentNotificationType {
  APPOINTMENT_SCHEDULED
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELLED
  APPOINTMENT_RESCHEDULED
  APPOINTMENT_REMINDER
  APPOINTMENT_COMPLETED
}

model Appointment {
  id                    String            @id @default(uuid())
  patientId             String
  providerId            String
  companyId             String
  appointmentType       AppointmentType
  status                AppointmentStatus @default(SCHEDULED)
  scheduledDate         DateTime
  duration              Int               // minutes
  reason                String
  notes                 String?
  room                  String?
  createdBy             String
  confirmedAt           DateTime?
  cancelledAt           DateTime?
  cancellationReason    String?
  noShowAt              DateTime?
  completedAt           DateTime?
  encounterId           String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  patient               Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  provider              User              @relation("AppointmentProvider", fields: [providerId], references: [id], onDelete: Cascade)
  company               Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByUser         User              @relation("AppointmentCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  notifications         AppointmentNotification[]

  @@index([patientId])
  @@index([providerId])
  @@index([scheduledDate])
  @@index([status])
  @@index([createdBy])
  @@index([companyId])
}

model AppointmentTimeSlot {
  id            String   @id @default(uuid())
  providerId    String
  companyId     String
  date          DateTime @db.Date
  startTime     DateTime @db.Time
  endTime       DateTime @db.Time
  duration      Int      // minutes
  isAvailable   Boolean  @default(true)
  isBlocked     Boolean  @default(false)
  blockReason   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  provider      User     @relation("TimeSlotProvider", fields: [providerId], references: [id], onDelete: Cascade)
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([providerId, date, startTime, duration])
  @@index([providerId, date])
  @@index([isAvailable, isBlocked])
}

model ProviderAvailability {
  id            String   @id @default(uuid())
  providerId    String
  companyId     String
  dayOfWeek     Int      // 0=Sunday, 1=Monday, etc.
  startTime     DateTime @db.Time
  endTime       DateTime @db.Time
  isAvailable   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  provider      User     @relation("ProviderAvailability", fields: [providerId], references: [id], onDelete: Cascade)
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([providerId, dayOfWeek])
  @@index([providerId])
}

model AppointmentNotification {
  id                String                     @id @default(uuid())
  appointmentId     String
  userId            String
  notificationType  AppointmentNotificationType
  message           String
  sentAt            DateTime?
  createdAt         DateTime                   @default(now())

  // Relations
  appointment       Appointment                @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  user              User                       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([appointmentId])
  @@index([userId])
}