generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String
  firstName          String
  lastName           String
  phoneNumber        String         @default("0781234568")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  otp                String?
  otpExpiresAt       DateTime? 
  photo              String         @default("https://img.freepik.com/premium-vector/user-profile-icon-flat-style-member-avatar-vector-illustration-isolated-background-human-permission-sign-business-concept_157943-15752.jpg")
  userRoles          UserRole[]
  likes              Likes[]  
  testimonials       Testimony[]
  agents              Agents[]
  company            CompanyUser?
  notification       Notification[]
  approvals           Approvals[]
  purchaseOrders     PurchaseOrder[]

}



enum RoleType {
  ADMIN
  AGENT
  COMPANY_ADMIN
  COMPANY_USER
  DEVELOPER
  ADMINISTRATOR
  MANAGER
  STAFF
  CLIENT
}

model UserRole {
  id          String  @id @default(uuid())
  userId      String
  name        RoleType
  user        User    @relation(fields: [userId], references: [id])
}

model ItemCategories {
  id                 String         @id @default(uuid())
  categoryName       String      
  description        String?
  items              Items[]
  companyId         String
  company            Company      @relation(fields: [companyId], references: [id])
}

model Suppliers {
  id                 String         @id @default(uuid())
  supplierName      String         
  contactPerson     String
  phoneNumber       String 
  email              String         @unique 
  address            String? 
  TIN                String?        
  createdAt         DateTime       @default(now()) 
  companyId         String
  company           Company      @relation(fields: [companyId], references: [id])

  supplierCompanyId String?
  supplierCompany   Company?     @relation("supplier_company", fields: [supplierCompanyId], references: [id])
  
  stockReceipts             StockReceipts[]
  purchaseOrders     PurchaseOrder[]
}

model Items {
  id                 String         @id @default(uuid())
  itemCodeSku      String         @unique        
  itemFullName     String
  categoryId        String 
  productCode       String?
  category           ItemCategories @relation(fields: [categoryId], references: [id])
  companyId        String
  company           Company      @relation(fields: [companyId], references: [id])
  description        String?
  minLevel           Decimal         @db.Decimal(10, 2)
  maxLevel           Decimal         @db.Decimal(10, 2)
  brandManufacturer String?
  batchLotNumber String? 
  serialNumber String?
  barcodeQrCode    String? 
  createdAt         DateTime       @default(now()) 
  updatedAt         DateTime       @updatedAt
  stockReceipts      StockReceipts[]
  purchaseOrderItems PurchaseOrderItem[]
  sells             Sell[]
  inventory     Inventory?     
}

model StockReceipts {
  id                 String          @id @default(uuid())
  itemId            String           
  item               Items           @relation(fields: [itemId], references: [id])               
  purchaseOrderId              String
  purchaseOrderNo     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderItemId String?  
  purchaseOrderItem   PurchaseOrderItem? @relation(fields: [purchaseOrderItemId], references: [id])
  invoiceNo         String?            
  supplierId        String           
  supplier           Suppliers       @relation(fields: [supplierId], references: [id]) 
  companyId        String
  company           Company      @relation(fields: [companyId], references: [id]) 
  dateReceived      DateTime
  expiryDate        DateTime? 
  quantityReceived  Decimal         @db.Decimal(10, 2)  
  unitCost          Decimal         @db.Decimal(18, 4)  
  totalCost         Decimal         @db.Decimal(18, 2)
  packSize          Decimal? 	      @db.Decimal(10, 2) 
  uom                String 
  tempReq           String 
  currency           String
  condition          String
  storageLocation   String   
  specialHandlingNotes      String? 	      
  remarksNotes       String?
  createdAt          DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  approvals           Approvals[]	
  stocks              Stock[]
}

model Stock{
id                 String         @id @default(uuid())
stockReceiptId     String
stockReceipt       StockReceipts  @relation(fields: [stockReceiptId], references: [id])
status             String          @default("PENDING")
sellId            String?
sell              Sell?      @relation(fields: [sellId], references: [id])
}

enum ProcessingStatus {
  PENDING
  SENT
  RECEIVED
  REJECTED
}

enum POApprovalStatus {
  NOT_YET
  SOME_APPROVED
  ALL_APPROVED
  REJECTED
}

enum ItemApprovalStatus {
  NOT_ACTED
  APPROVED
  REJECTED
}

model Approvals {
  id                 String         @id @default(uuid())
  stockReceiptId     String
  stockReceipts             StockReceipts          @relation(fields: [stockReceiptId], references: [id])
  approvedByUserId String 
  approvedByUser    User          @relation(fields: [approvedByUserId], references: [id])
  ExpectedSellPrice          Decimal?         @db.Decimal(18, 2)
  dateApproved      DateTime         
  approvalStatus    String         @default("PENDING")
  comments           String?       
  createdAt          DateTime       @default(now())     
}

model PurchaseOrder{
  id                 String         @id @default(uuid())
  poNumber           String         @unique  
  companyId          String
  reqById            String?
  isDelivered        Boolean        @default(false)
  deliveredAt        DateTime? 
  company      Company  @relation(fields: [companyId], references: [id])
  items              PurchaseOrderItem[]
  supplierId         String
  suppliers          Suppliers @relation(fields: [supplierId], references: [id])
  user                    User? @relation(fields: [reqById], references: [id])
  notes               String?
  expectedDeliveryDate DateTime
  overallStatus      POApprovalStatus @default(NOT_YET)
  grandTotal           Decimal? @db.Decimal(18, 4)
  subtotal             Decimal? @db.Decimal(18, 4)
  vat                  Decimal? @db.Decimal(18, 4)
  vatRate              Float?
  createdAt            DateTime    @default(now())
  stockReceipts        StockReceipts[]
  processingEntries    PurchaseOrderProcessing[]
}

model PurchaseOrderItem {
  id              String   @id @default(uuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  itemId          String
  item            Items    @relation(fields: [itemId], references: [id])
  quantity        Decimal  @db.Decimal(10, 2)
  packSize          Decimal? 	      @db.Decimal(10, 2)
  itemStatus      ItemApprovalStatus @default(NOT_ACTED)
  quantityIssued       Decimal? @db.Decimal(10, 2)
  batchNo              String?
  expiryDate           DateTime?
  unitPrice            Decimal? @db.Decimal(18, 4)
  totalPrice           Decimal? @db.Decimal(18, 2)
  stockReceipts   StockReceipts[]
}


model PurchaseOrderProcessing {
  id                   String   @id @default(uuid())
  purchaseOrderId      String
  purchaseOrder        PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  companyFromId        String
  companyFrom          Company @relation("processing_from", fields: [companyFromId], references: [id])
  companyToId          String
  companyTo            Company @relation("processing_to", fields: [companyToId], references: [id])
  status               ProcessingStatus @default(PENDING)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Client {
    id                 String         @id @default(uuid())
    companyId          String
    name               String
    email              String
    phone              String
    address            String
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    sells             Sell[]
}

model Sell {
    id                 String         @id @default(uuid())
    clientId           String
    companyId          String
    client             Client         @relation(fields: [clientId], references: [id])
    itemId             String
    item               Items          @relation(fields: [itemId], references: [id])
    quantity           Decimal         @db.Decimal(10, 2)
    sellPrice          Decimal         @db.Decimal(18, 2)
    totalAmount        Decimal         @db.Decimal(18, 2)
    notes              String?
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
     stocks            Stock[]
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  message     String
  type        NotificationType @default(info)
  isRead      Boolean  @default(false)
  actionUrl   String?  @db.VarChar(500)

  entityType  String?  @db.VarChar(50)
  entityId    String?
  metadata    Json?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum NotificationType {
  info
  success
  warning
  error
}


model Services {
  id                      String           @id @default(uuid())
  title                   String
  description             String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model Testimony {
  id                      String           @id @default(uuid())
  name                    String
  message                 String
  photo                   String?
  rating                  Int?
  reviewsId               String?
  agentReviewId           String?
  userId                  String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  reviews                 Reviews?       @relation(fields: [reviewsId], references: [id])
  agentReviews            AgentReview?   @relation(fields: [agentReviewId], references: [id])
  user                    User? @relation(fields: [userId], references: [id])
}

model Reviews {
  id                      String           @id @default(uuid())
  productId              String           @unique
  count                   Int           @default(0)       
  rating                  Float            
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  product                Product         @relation(fields: [productId], references: [id])
  testimonials            Testimony[]
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  message   String
  status           ContactStatus @default(PENDING)  
  conversationId   String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   ContactReply[]

}

model ContactReply {
  id         String   @id @default(cuid())
  contact    Contact  @relation(fields: [contactId], references: [id])
  contactId  String
  message    String
  adminName  String? 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum ContactStatus {
  PENDING
  RESOLVED
}

enum ProductCategory {
  WOMENS_FASHION
  MENS_FASHION
  FASHION
  ELECTRONICS
  FURNITURES
  MADE_IN_RWANDA
  HOME_AND_LIVING
  SUPERMARKETING
  MOBILES_AND_TABLETS
  COMPUTERS_AND_GAMING
  HEALTH_AND_BEAUTY
  SPORTS_EQUIPMENT
  ART_AND_ENTERTAINMENT
  RESTAURANTS
  JEWELRY_AND_WATCHES
  KIDS_AND_BABIES
  AUTO_SPARE_PARTS
  VEHICLES_SHOPPING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
  SUCCEEDED
  CANCELED
}

enum PaymentMethod {
  CARD
  CASH_ON_DELIVERY
  MOBILE_MONEY
  AIRTEL_MONEY
  BANK_TRANSFER
  MTN_MOBILE_MONEY
}

enum DeliveryStatus {
  PENDING
  DISPATCHED
  IN_TRANSIT
  DELIVERED
  RETURNED
}



model Faq {
  id                      String           @id @default(uuid())
  question                String
  solution                String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model Blog {
  id                      String           @id @default(uuid())
  title                   String
  thumbnail               String
  teaser                  String
  description             String
  category                String
  likes                   Int           @default(0)
  views                   Int           @default(0)
  featured                Boolean
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt      
  likesModel              Likes[]            
}

model Likes {
  id                      String           @id  @default(uuid())
  userId                  String
  blogId                  String
  blog                    Blog @relation(fields: [blogId], references: [id])  
  user                    User @relation(fields: [userId], references: [id])  
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt    

  @@unique([blogId, userId])
}

model Ads {
  id                      String           @id @default(uuid())
  thumbnail               String
  title                   String
  location                String
  description             String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model Agents {
  id                      String           @id @default(uuid())
  userId                  String
  description             String  
  experience              String
  speciality              String[]
  whatsapp                String
  joined                  String
  languages               String
  about                   String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt  
  user                    User @relation(fields: [userId], references: [id])
  agentReviews            AgentReview? 
  enquiryProperty         EnquiryProperty[]               
}

model AgentReview {
  id                      String           @id @default(uuid())
  agentId                 String           @unique
  count                   Int           @default(0)       
  rating                  Float         @default(0.0) 
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  agent                   Agents         @relation(fields: [agentId], references: [id])
  testimonials            Testimony[]
}


model Product {
  id                      String           @id @default(uuid())
  name                    String
  isFeatured                Boolean  @default(true)
  description             String
  teaser                  String
  model                   String?
  warranty                   String?
  brand                   String?
  category                ProductCategory
  price                   Float  
  featuresOne            String?
  featuresTwo            String?
  featuresThree          String?
  featuresFour           String?
  featuresFive           String?
  featuresFix            String?
  featuresSeven          String?
  featuresEight          String?
  featuresNine           String?
  featuresTen            String?
  discountPercentage      Float? 
  stockQuantity           Int      @default(0)
  isActive                Boolean  @default(true)
  thumbnail               String
  galleryImages           String[] @default([])
  rating                  Float?   @default(4.5)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  reviews                 Reviews?
  orderItem               OrderItem[]
}


model EnquiryProperty {
  id                      String           @id @default(uuid())
  agentId                 String           @unique
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  agent                   Agents         @relation(fields: [agentId], references: [id])
}

model Order {
  id             String       @id @default(uuid())
  orderNumber    String
  status         OrderStatus  @default(PENDING)
  totalAmount    Float
  subTotal       Float
  deliveryFee    Float? 
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  orderItems     OrderItem[]
  payment        Payment?
  delivery       Delivery?
}


model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  discount       Float? 
  quantity   Int      @default(1)
  unitPrice  Float    
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id           String        @id @default(uuid())
  orderId      String        @unique
  amount       Float
  kind         String
  method       PaymentMethod
  status       PaymentStatus @default(PENDING)
  paidAt       DateTime?
  accountNumber String
  accountProvider String?
  refId        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Delivery {
  id             String         @id @default(uuid())
  orderId        String         @unique
  address        String
  city           String
  province       String
  country        String
  postalCode     String
  customerFirstName   String
  customerLastName   String
  customerEmail  String
  customerPhone  String
  customerNote   String?
  deliveryStatus DeliveryStatus @default(PENDING)
  estimatedDate  DateTime?
  deliveredAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
}


model Company {
  id             String          @id @default(uuid())
  name           String
  email          String        @unique
  phoneNumber    String        @unique
  industry       String?
  website        String       
  TIN            String        @unique
  type           String
  certificate    String
  logo           String?
  country        String
  province       String
  district       String
  sector         String
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  CompanyUser    CompanyUser[]
  insurance      Insurance[]
  items          Items[]
  itemCategories ItemCategories[]
  suppliers      Suppliers[]
  stockReceipts          StockReceipts[]
  processingFrom  PurchaseOrderProcessing[] @relation("processing_from")
  processingTo    PurchaseOrderProcessing[] @relation("processing_to")
  supplierFor    Suppliers[] @relation("supplier_company")
  purchaseOrders PurchaseOrder[]
  companyTools     CompanyTools[]
}

model CompanyUser {
  id           String      @id @default(uuid())
  companyId    String
  userId       String      @unique
  title        String?
  idNumber     String?
  idAttachment String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model Patient {
  id                 String          @id @default(uuid())
  name               String
  identificationType String
  phone              String
  gender             String
  birthDate          DateTime
  patientNO          String          @unique
  NID                String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  companyId          String
  address            PatientAddress[]
  insuranceCards     InsuranceCard[]
}

model PatientAddress {
  id          String   @id @default(uuid())
  patientId   String
  city        String
  street      String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  patient     Patient  @relation(fields: [patientId], references: [id])
}

model InsuranceCard {
  id            String   @id @default(uuid())
  companyId     String
  patientId     String
  insuranceId     String
  cardNumber    String   @unique
  expireDate    DateTime
  beneficiary   String
  isOwner       Boolean
  expired       Boolean  @default(false)
  deletedAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  patient       Patient  @relation(fields: [patientId], references: [id])
  insurance     Insurance  @relation(fields: [insuranceId], references: [id])
  insuranceDetails InsuranceDetail[]
}

model InsuranceDetail {
  id              String   @id @default(uuid())
  insuranceCardId String
  key             String
  value           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  insuranceCard   InsuranceCard @relation(fields: [insuranceCardId], references: [id])
}

model Insurance {
  id           String      @id @default(uuid())
  companyId    String
  name         String
  percentage   Float        @default(0.0)
  company      Company      @relation(fields: [companyId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  insuranceCard InsuranceCard[]
}

model Inventory{
id                 String         @id @default(uuid())
itemId             String         @unique
item               Items          @relation(fields: [itemId], references: [id])
totalQuantity      Decimal        @db.Decimal(10, 2)
status             String          @default("PENDING")
expireDate    DateTime?
expired       Boolean  @default(false)
sellingPercentage   Int?
sellingPrice       Decimal?        @db.Decimal(10, 2)
}

model  CompanyTools {
  id                  String         @id @default(uuid())
  companyId           String
  sellingPercentage   Int?
  companySignature    String?
  companyStamp        String?

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  company      Company      @relation(fields: [companyId], references: [id])
}